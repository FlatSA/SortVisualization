//////////////////////////////////////////////////////////////////////////////////
//                                                                              //
// StyleAsCode exporter v1.2 - Style data exported as a values array            //
//                                                                              //
// USAGE: On init call: GuiLoadStyleAshes();                                    //
//                                                                              //
// more info and bugs-report:  github.com/raysan5/raygui                        //
// feedback and support:       ray[at]raylibtech.com                            //
//                                                                              //
// Copyright (c) 2020-2022 raylib technologies (@raylibtech)                    //
//                                                                              //
//////////////////////////////////////////////////////////////////////////////////

#define ASHES_STYLE_PROPS_COUNT  15

// Custom style name: ashes
static const GuiStyleProp ashesStyleProps[ASHES_STYLE_PROPS_COUNT] = {
    { 0, 0, 0xf0f0f0ff },    // DEFAULT_BORDER_COLOR_NORMAL 
    { 0, 1, 0x868686ff },    // DEFAULT_BASE_COLOR_NORMAL 
    { 0, 2, 0xe6e6e6ff },    // DEFAULT_TEXT_COLOR_NORMAL 
    { 0, 3, 0x929999ff },    // DEFAULT_BORDER_COLOR_FOCUSED 
    { 0, 4, 0xeaeaeaff },    // DEFAULT_BASE_COLOR_FOCUSED 
    { 0, 5, 0x98a1a8ff },    // DEFAULT_TEXT_COLOR_FOCUSED 
    { 0, 6, 0x3f3f3fff },    // DEFAULT_BORDER_COLOR_PRESSED 
    { 0, 7, 0xf6f6f6ff },    // DEFAULT_BASE_COLOR_PRESSED 
    { 0, 8, 0x414141ff },    // DEFAULT_TEXT_COLOR_PRESSED 
    { 0, 9, 0x8b8b8bff },    // DEFAULT_BORDER_COLOR_DISABLED 
    { 0, 10, 0x777777ff },    // DEFAULT_BASE_COLOR_DISABLED 
    { 0, 11, 0x959595ff },    // DEFAULT_TEXT_COLOR_DISABLED 
    { 0, 16, 0x00000010 },    // DEFAULT_TEXT_SIZE 
    { 0, 18, 0x9dadb1ff },    // DEFAULT_LINE_COLOR 
    { 0, 19, 0x6b6b6bff },    // DEFAULT_BACKGROUND_COLOR 
};

// WARNING: This style uses a custom font:  (size: 16, spacing: 1)

#define ASHES_COMPRESSED_DATA_SIZE 999

// Font image pixels data compressed (DEFLATE)
// NOTE: Original pixel data simplified to GRAYSCALE
static unsigned char ashesFontData[ASHES_COMPRESSED_DATA_SIZE] = { 0xed,
    0xdd, 0x4b, 0x96, 0x9b, 0x30, 0x10, 0x05, 0x50, 0xed, 0x7f, 0xd3, 0x95, 0x51, 0x4e, 0x3e, 0xa7, 0x31, 0x54, 0xa9, 0x64,
    0x7e, 0x37, 0x77, 0xd6, 0xed, 0x60, 0x9a, 0x87, 0xc0, 0x36, 0x0f, 0x39, 0x06, 0x00, 0xc0, 0x7f, 0xe2, 0xc7, 0x9f, 0xc4,
    0xe6, 0x23, 0xe3, 0xf0, 0x72, 0xfe, 0xfd, 0x79, 0x6c, 0xfc, 0x36, 0xb7, 0xbc, 0x38, 0xfc, 0xbc, 0x95, 0xdf, 0xc4, 0x8f,
    0xeb, 0x17, 0xd3, 0xcf, 0x1a, 0x87, 0xff, 0x9a, 0x4f, 0x8f, 0xfd, 0xf4, 0x9c, 0x71, 0xd1, 0xfc, 0xe3, 0xc3, 0xf2, 0x3e,
    0x2f, 0x31, 0x26, 0xf6, 0x89, 0x63, 0xcf, 0x7b, 0x3c, 0xd3, 0xf9, 0xed, 0xb9, 0xb5, 0x6f, 0x1d, 0x7f, 0xec, 0xfe, 0x36,
    0x5e, 0x9b, 0xff, 0xdf, 0xff, 0xc6, 0xc6, 0x6f, 0x6b, 0x19, 0xaf, 0x19, 0xe9, 0x9f, 0xd7, 0x34, 0x9a, 0xd2, 0x3e, 0xbe,
    0xd7, 0xc6, 0xd4, 0x71, 0xa8, 0xb2, 0xf4, 0xfa, 0x1a, 0x8f, 0x64, 0x5a, 0xb1, 0xb3, 0x17, 0x46, 0x7a, 0x89, 0xb3, 0xc7,
    0xf3, 0xca, 0xf8, 0xbf, 0x4a, 0xfe, 0xb5, 0xbd, 0x39, 0x2e, 0x90, 0x7f, 0x25, 0xb9, 0x68, 0x58, 0xd3, 0x68, 0x3a, 0xff,
    0xaf, 0x48, 0x3f, 0x9b, 0x7f, 0x34, 0x6e, 0x81, 0xce, 0xfc, 0xab, 0xc7, 0xff, 0xca, 0xf1, 0x6f, 0x5c, 0x24, 0xcf, 0xef,
    0xe7, 0x1f, 0x5f, 0xdf, 0x02, 0x1d, 0xe3, 0x7f, 0xec, 0x1e, 0x6d, 0x63, 0xe7, 0x55, 0x4d, 0x3c, 0x20, 0xff, 0x8e, 0xfd,
    0xbf, 0x7a, 0xa6, 0xbc, 0xee, 0xf9, 0x3f, 0x0e, 0x1c, 0xeb, 0xe2, 0x11, 0xe3, 0x3f, 0x7f, 0x96, 0x3b, 0xfe, 0x7e, 0x73,
    0xef, 0x4c, 0x19, 0xa7, 0xff, 0xed, 0xb5, 0x57, 0x20, 0xbf, 0xff, 0xdf, 0xfd, 0xc7, 0xff, 0x55, 0xce, 0x41, 0x67, 0xad,
    0x77, 0x9c, 0x3a, 0xbe, 0xe4, 0xff, 0x86, 0xbf, 0x3f, 0x6c, 0x79, 0x7b, 0x99, 0xf4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x4a, 0xcd, 0x82, 0x7c, 0x13, 0x21, 0xa6, 0x3b, 0x6e, 0x3d, 0xfd, 0xfb, 0x48, 0x6f, 0x81, 0x4a, 0xef, 0x7e, 0x6b, 0xbd,
    0x72, 0x8f, 0x1f, 0xe9, 0x4e, 0x5d, 0xb5, 0xef, 0x1b, 0xe5, 0x56, 0xd7, 0x7c, 0x43, 0x7d, 0xc5, 0x15, 0xe4, 0x7a, 0xd7,
    0x2e, 0xd3, 0xd1, 0x8d, 0xa6, 0x9e, 0x56, 0x34, 0xdf, 0xa3, 0xd2, 0x9d, 0xff, 0x38, 0x3d, 0xff, 0x58, 0xda, 0x07, 0x89,
    0x9d, 0xbe, 0xd9, 0x1b, 0xf2, 0xaf, 0x36, 0x77, 0x33, 0xc7, 0xf9, 0x68, 0xef, 0x4e, 0xe6, 0xd7, 0x6f, 0xff, 0x7e, 0x80,
    0x37, 0xe6, 0x3f, 0xd2, 0xe3, 0x36, 0x7f, 0x84, 0x3d, 0x7a, 0xa6, 0x8e, 0x13, 0xc7, 0xff, 0xa7, 0xf3, 0x76, 0x24, 0x46,
    0x4d, 0x36, 0xff, 0xdc, 0xf3, 0xfe, 0x59, 0xd7, 0xdc, 0x88, 0x38, 0x33, 0xff, 0x31, 0xd9, 0xe3, 0x8c, 0xb6, 0x23, 0x46,
    0xf5, 0x3c, 0x77, 0xbd, 0xf1, 0xdf, 0xfd, 0xfa, 0x6f, 0x5d, 0xfe, 0xd1, 0xd0, 0xc6, 0x8a, 0xa5, 0x5d, 0xd0, 0xca, 0x3d,
    0x2a, 0xcf, 0xc9, 0xbf, 0xf2, 0x0e, 0xa7, 0x67, 0x39, 0x77, 0xe8, 0xa1, 0xbe, 0x21, 0x7f, 0xe4, 0xaf, 0x87, 0x5e, 0x79,
    0xdd, 0xb6, 0xee, 0xf3, 0x9f, 0x48, 0x1f, 0xaf, 0xe5, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x4b, 0xbf, 0x77,
    0xbb, 0xa1, 0x99, 0x9f, 0x17, 0xbc, 0xe3, 0xf1, 0xd5, 0x67, 0x88, 0xb6, 0x0e, 0x68, 0x5f, 0xa3, 0x74, 0xfb, 0x8a, 0x72,
    0xc7, 0x35, 0xee, 0x75, 0xf9, 0x8f, 0xf6, 0x5e, 0x6d, 0xbe, 0xa5, 0x96, 0x9f, 0x31, 0x7f, 0x5c, 0x2c, 0xff, 0x91, 0xd8,
    0xee, 0xf2, 0x7f, 0x77, 0xfe, 0x7d, 0x6d, 0xe9, 0xa7, 0xe7, 0x3f, 0x6e, 0x95, 0xff, 0xdc, 0x77, 0x04, 0x74, 0xe5, 0x5f,
    0x6f, 0xbc, 0x77, 0x9d, 0x05, 0xe7, 0xef, 0x3a, 0x18, 0xe5, 0xef, 0x16, 0xea, 0xca, 0x7f, 0x14, 0xee, 0x04, 0x5c, 0xd7,
    0x96, 0xbf, 0xd7, 0xf8, 0x1f, 0x0d, 0xe3, 0x7f, 0x5c, 0xf4, 0xf8, 0x3f, 0x9a, 0x1a, 0xa2, 0xf2, 0x7f, 0x77, 0xfe, 0x9d,
    0xf7, 0xcb, 0x3e, 0x31, 0xff, 0xab, 0xbe, 0xfe, 0x93, 0xff, 0x1d, 0xf3, 0x8f, 0xb6, 0xbf, 0xbc, 0x2f, 0xff, 0xdc, 0x1e,
    0x10, 0xd3, 0xfd, 0xf2, 0xfd, 0x4f, 0x4d, 0x22, 0xb9, 0xb4, 0xd1, 0x30, 0xaf, 0x43, 0xfe, 0xf5, 0x57, 0xf6, 0xce, 0xa6,
    0xbd, 0x39, 0x23, 0xb2, 0xf3, 0x34, 0xe4, 0xe6, 0x81, 0xb8, 0xf2, 0xb7, 0x7e, 0x9c, 0x31, 0x87, 0x89, 0xcf, 0x6d, 0xb1,
    0xcf, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x67, 0x79, 0x8c, 0xe4, 0xf5, 0xc8, 0xae, 0xab, 0xb9, 0xa3, 0xe5, 0x1b,
    0x07, 0xa2, 0xe1, 0x0a, 0xfb, 0xdc, 0xff, 0x8f, 0xbf, 0xae, 0x0d, 0x77, 0xdd, 0xe5, 0x30, 0x7b, 0x75, 0x68, 0x7b, 0x96,
    0xe1, 0x9e, 0x2b, 0x92, 0xab, 0x3a, 0x0d, 0x51, 0x68, 0x46, 0xc7, 0x82, 0x2b, 0xa9, 0x91, 0xdc, 0xae, 0x67, 0xb6, 0xa2,
    0x73, 0xf9, 0x44, 0xcb, 0xd1, 0xa5, 0xa3, 0x4b, 0x1c, 0xd3, 0x5d, 0xe1, 0x7c, 0x53, 0x78, 0x45, 0x33, 0xea, 0x1e, 0xf9,
    0xf7, 0x76, 0x14, 0x56, 0x8d, 0xdc, 0xde, 0xf1, 0x1f, 0x5f, 0x69, 0xc6, 0xcb, 0xbf, 0x33, 0xff, 0xdc, 0x2b, 0x91, 0x75,
    0xf9, 0x1b, 0xff, 0xe7, 0x8d, 0xff, 0xd9, 0x16, 0x9f, 0xfc, 0xdf, 0x91, 0x7f, 0x34, 0xcd, 0xcd, 0x2d, 0xff, 0xf9, 0x77,
    0x97, 0xb9, 0x0e, 0x6c, 0x57, 0x57, 0xf8, 0x3a, 0xe3, 0x7f, 0xb4, 0xb5, 0xa2, 0xf3, 0x77, 0xbf, 0x5f, 0xa1, 0x49, 0x5a,
    0xd9, 0x3f, 0xa3, 0xe5, 0x8e, 0x86, 0xb3, 0xcf, 0xff, 0xdf, 0xec, 0x00, 0x5f, 0x37, 0xff, 0x6c, 0x7b, 0x35, 0x26, 0xef,
    0x68, 0x38, 0x27, 0xff, 0xf5, 0x5b, 0xf6, 0xbe, 0xf9, 0xdf, 0xb7, 0x31, 0x7d, 0xa5, 0xad, 0xd5, 0x91, 0xbf, 0x1e, 0xb9,
    0xfb, 0x2e, 0x70, 0xcf, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xf8, 0x54, 0x3b, 0xdf, 0x89, 0xcd, 0xf4, 0x88, 0x63,
    0xe2, 0x8a, 0xfa, 0xf1, 0x26, 0xe0, 0x38, 0x3c, 0x4f, 0x7e, 0x24, 0xbb, 0xc7, 0x4f, 0xbf, 0x9e, 0xd5, 0xdb, 0xd0, 0x3a,
    0x6b, 0x8e, 0xf4, 0xca, 0x3c, 0x8f, 0xf3, 0xf7, 0x41, 0x3c, 0x27, 0xff, 0xf9, 0x26, 0x7e, 0x2d, 0xff, 0x7c, 0x6f, 0x6c,
    0xdd, 0x4f, 0xdf, 0x7a, 0x3d, 0xfb, 0x1b, 0xc7, 0xff, 0xd5, 0x73, 0xe4, 0xcb, 0x7f, 0xae, 0xcf, 0x70, 0x9f, 0xe3, 0x7f,
    0xdf, 0x3c, 0xdf, 0xf2, 0xef, 0xbe, 0xb7, 0x66, 0x7d, 0x0f, 0xba, 0xeb, 0x3b, 0x12, 0xde, 0xb8, 0x07, 0x3c, 0x21, 0xff,
    0xae, 0x9c, 0xe5, 0xdf, 0xdd, 0xad, 0x1f, 0x07, 0xe6, 0xc8, 0x1e, 0xd3, 0xf7, 0x6a, 0x46, 0xcb, 0x77, 0xa7, 0xe8, 0x76,
    0xdd, 0xa3, 0xfd, 0x18, 0x8b, 0xde, 0xdd, 0xc8, 0xff, 0x1e, 0x1d, 0x48, 0xf9, 0xdb, 0xfb, 0xbe, 0xb7, 0xaf, 0xf0, 0x86,
    0x3d, 0x46, 0xb3, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x5b, 0xfa, 0x05 };

// Font characters rectangles data
static const Rectangle ashesFontRecs[95] = {
    { 4, 4, 4 , 16 },
    { 16, 4, 1 , 10 },
    { 25, 4, 3 , 3 },
    { 36, 4, 6 , 8 },
    { 50, 4, 5 , 11 },
    { 63, 4, 7 , 8 },
    { 78, 4, 6 , 9 },
    { 92, 4, 1 , 3 },
    { 101, 4, 3 , 12 },
    { 112, 4, 3 , 12 },
    { 123, 4, 5 , 5 },
    { 136, 4, 5 , 5 },
    { 149, 4, 2 , 2 },
    { 159, 4, 4 , 1 },
    { 171, 4, 1 , 1 },
    { 180, 4, 5 , 10 },
    { 193, 4, 4 , 8 },
    { 205, 4, 2 , 8 },
    { 215, 4, 4 , 8 },
    { 227, 4, 4 , 8 },
    { 239, 4, 6 , 8 },
    { 4, 28, 4 , 8 },
    { 16, 28, 4 , 8 },
    { 28, 28, 4 , 8 },
    { 40, 28, 4 , 8 },
    { 52, 28, 4 , 8 },
    { 64, 28, 1 , 5 },
    { 73, 28, 2 , 6 },
    { 83, 28, 4 , 7 },
    { 95, 28, 4 , 4 },
    { 107, 28, 4 , 7 },
    { 119, 28, 4 , 10 },
    { 131, 28, 8 , 7 },
    { 147, 28, 4 , 10 },
    { 159, 28, 4 , 10 },
    { 171, 28, 4 , 10 },
    { 183, 28, 4 , 10 },
    { 195, 28, 4 , 10 },
    { 207, 28, 5 , 10 },
    { 220, 28, 4 , 10 },
    { 232, 28, 4 , 10 },
    { 4, 52, 1 , 10 },
    { 13, 52, 3 , 10 },
    { 24, 52, 4 , 10 },
    { 36, 52, 4 , 10 },
    { 48, 52, 7 , 10 },
    { 63, 52, 4 , 10 },
    { 75, 52, 4 , 10 },
    { 87, 52, 4 , 10 },
    { 99, 52, 5 , 11 },
    { 112, 52, 4 , 10 },
    { 124, 52, 4 , 10 },
    { 136, 52, 5 , 10 },
    { 149, 52, 4 , 10 },
    { 161, 52, 4 , 10 },
    { 173, 52, 7 , 10 },
    { 188, 52, 4 , 10 },
    { 200, 52, 4 , 10 },
    { 212, 52, 4 , 10 },
    { 224, 52, 2 , 12 },
    { 234, 52, 5 , 10 },
    { 4, 76, 2 , 12 },
    { 14, 76, 5 , 3 },
    { 27, 76, 5 , 1 },
    { 40, 76, 2 , 2 },
    { 50, 76, 4 , 8 },
    { 62, 76, 4 , 10 },
    { 74, 76, 3 , 8 },
    { 85, 76, 4 , 10 },
    { 97, 76, 4 , 8 },
    { 109, 76, 3 , 10 },
    { 120, 76, 5 , 11 },
    { 133, 76, 4 , 10 },
    { 145, 76, 1 , 10 },
    { 154, 76, 3 , 13 },
    { 165, 76, 4 , 10 },
    { 177, 76, 2 , 10 },
    { 187, 76, 7 , 8 },
    { 202, 76, 4 , 8 },
    { 214, 76, 4 , 8 },
    { 226, 76, 4 , 11 },
    { 238, 76, 4 , 11 },
    { 4, 100, 3 , 8 },
    { 15, 100, 4 , 8 },
    { 27, 100, 3 , 10 },
    { 38, 100, 4 , 8 },
    { 50, 100, 5 , 8 },
    { 63, 100, 7 , 8 },
    { 78, 100, 4 , 8 },
    { 90, 100, 4 , 11 },
    { 102, 100, 4 , 8 },
    { 114, 100, 4 , 12 },
    { 126, 100, 1 , 10 },
    { 135, 100, 4 , 12 },
    { 147, 100, 4 , 2 },
};

// Font characters info data
// NOTE: No chars.image data provided
static const GlyphInfo ashesFontChars[95] = {
    { 32, 0, 13, 4, { 0 }},
    { 33, 0, 3, 4, { 0 }},
    { 34, 0, 1, 5, { 0 }},
    { 35, 0, 4, 8, { 0 }},
    { 36, 0, 2, 7, { 0 }},
    { 37, 0, 5, 9, { 0 }},
    { 38, 0, 4, 8, { 0 }},
    { 39, 0, 1, 3, { 0 }},
    { 40, 0, 2, 5, { 0 }},
    { 41, 0, 2, 5, { 0 }},
    { 42, 0, 3, 7, { 0 }},
    { 43, 0, 6, 7, { 0 }},
    { 44, 0, 12, 4, { 0 }},
    { 45, 0, 9, 5, { 0 }},
    { 46, 0, 12, 3, { 0 }},
    { 47, 0, 3, 7, { 0 }},
    { 48, 0, 5, 6, { 0 }},
    { 49, 0, 5, 4, { 0 }},
    { 50, 0, 5, 6, { 0 }},
    { 51, 0, 5, 6, { 0 }},
    { 52, 0, 5, 8, { 0 }},
    { 53, 0, 5, 6, { 0 }},
    { 54, 0, 5, 6, { 0 }},
    { 55, 0, 5, 6, { 0 }},
    { 56, 0, 5, 6, { 0 }},
    { 57, 0, 5, 6, { 0 }},
    { 58, 0, 8, 3, { 0 }},
    { 59, 0, 8, 4, { 0 }},
    { 60, 0, 5, 6, { 0 }},
    { 61, 0, 7, 7, { 0 }},
    { 62, 0, 5, 6, { 0 }},
    { 63, 1, 3, 7, { 0 }},
    { 64, 0, 5, 10, { 0 }},
    { 65, 0, 3, 6, { 0 }},
    { 66, 0, 3, 6, { 0 }},
    { 67, 0, 3, 6, { 0 }},
    { 68, 0, 3, 6, { 0 }},
    { 69, 0, 3, 6, { 0 }},
    { 70, 0, 3, 6, { 0 }},
    { 71, 0, 3, 6, { 0 }},
    { 72, 0, 3, 6, { 0 }},
    { 73, 0, 3, 3, { 0 }},
    { 74, 0, 3, 5, { 0 }},
    { 75, 0, 3, 6, { 0 }},
    { 76, 0, 3, 6, { 0 }},
    { 77, 0, 3, 9, { 0 }},
    { 78, 0, 3, 6, { 0 }},
    { 79, 0, 3, 6, { 0 }},
    { 80, 0, 3, 6, { 0 }},
    { 81, 0, 3, 7, { 0 }},
    { 82, 0, 3, 6, { 0 }},
    { 83, 0, 3, 6, { 0 }},
    { 84, 0, 3, 6, { 0 }},
    { 85, 0, 3, 6, { 0 }},
    { 86, 0, 3, 6, { 0 }},
    { 87, 0, 3, 9, { 0 }},
    { 88, 0, 3, 6, { 0 }},
    { 89, 0, 3, 6, { 0 }},
    { 90, 0, 3, 6, { 0 }},
    { 91, 0, 2, 4, { 0 }},
    { 92, 0, 3, 7, { 0 }},
    { 93, 0, 2, 4, { 0 }},
    { 94, 0, 3, 7, { 0 }},
    { 95, 0, 12, 7, { 0 }},
    { 96, 0, 1, 4, { 0 }},
    { 97, 0, 5, 6, { 0 }},
    { 98, 0, 3, 6, { 0 }},
    { 99, 0, 5, 5, { 0 }},
    { 100, 0, 3, 6, { 0 }},
    { 101, 0, 5, 6, { 0 }},
    { 102, 0, 3, 5, { 0 }},
    { 103, 0, 5, 6, { 0 }},
    { 104, 0, 3, 6, { 0 }},
    { 105, 0, 3, 3, { 0 }},
    { 106, 0, 3, 5, { 0 }},
    { 107, 0, 3, 6, { 0 }},
    { 108, 0, 3, 4, { 0 }},
    { 109, 0, 5, 9, { 0 }},
    { 110, 0, 5, 6, { 0 }},
    { 111, 0, 5, 6, { 0 }},
    { 112, 0, 5, 6, { 0 }},
    { 113, 0, 5, 6, { 0 }},
    { 114, 0, 5, 5, { 0 }},
    { 115, 0, 5, 6, { 0 }},
    { 116, 0, 3, 5, { 0 }},
    { 117, 0, 5, 6, { 0 }},
    { 118, 0, 5, 7, { 0 }},
    { 119, 0, 5, 9, { 0 }},
    { 120, 0, 5, 6, { 0 }},
    { 121, 0, 5, 6, { 0 }},
    { 122, 0, 5, 6, { 0 }},
    { 123, 0, 2, 6, { 0 }},
    { 124, 0, 3, 3, { 0 }},
    { 125, 0, 2, 6, { 0 }},
    { 126, 0, 1, 6, { 0 }},
};

// Style loading function: ashes
static void GuiLoadStyleAshes(void)
{
    // Load style properties provided
    // NOTE: Default properties are propagated
    for (int i = 0; i < ASHES_STYLE_PROPS_COUNT; i++)
    {
        GuiSetStyle(ashesStyleProps[i].controlId, ashesStyleProps[i].propertyId, ashesStyleProps[i].propertyValue);
    }

    // Custom font loading
    // NOTE: Compressed font image data (DEFLATE), it requires DecompressData() function
    int ashesFontDataSize = 0;
    unsigned char *data = DecompressData(ashesFontData, ASHES_COMPRESSED_DATA_SIZE, &ashesFontDataSize);
    Image imFont = { data, 256, 256, 1, 2 };

    Font font = { 0 };
    font.baseSize = 16;
    font.glyphCount = 95;

    // Load texture from image
    font.texture = LoadTextureFromImage(imFont);
    UnloadImage(imFont);  // Uncompressed data can be unloaded from memory

    // Copy char recs data from global fontRecs
    // NOTE: Required to avoid issues if trying to free font
    font.recs = (Rectangle *)malloc(font.glyphCount*sizeof(Rectangle));
    memcpy(font.recs, ashesFontRecs, font.glyphCount*sizeof(Rectangle));

    // Copy font char info data from global fontChars
    // NOTE: Required to avoid issues if trying to free font
    font.glyphs = (GlyphInfo *)malloc(font.glyphCount*sizeof(GlyphInfo));
    memcpy(font.glyphs, ashesFontChars, font.glyphCount*sizeof(GlyphInfo));

    GuiSetFont(font);

    // Setup a white rectangle on the font to be used on shapes drawing,
    // this way we make sure all gui can be drawn on a single pass because no texture change is required
    // NOTE: Setting up this rectangle is a manual process (for the moment)
    Rectangle whiteChar = { 37, 6, 1, 1 };
    SetShapesTexture(font.texture, whiteChar);

    //-----------------------------------------------------------------

    // TODO: Custom user style setup: Set specific properties here (if required)
    // i.e. Controls specific BORDER_WIDTH, TEXT_PADDING, TEXT_ALIGNMENT
}
